#include "gemt_interface.h"

// Flag: Set to true when display booted up from a menu object
bool hasBeenBootedUp = false; 

// Current state (Position) of the encoder. Max by uint8 is 255
volatile uint8_t ebState = 0; 

// Updated on encoder "click" case, must reset after use 
volatile bool clicked = false; 

uint8_t clickedItemNumber = 0;

#define displayRowLimit 8
#define displayColLimit 21

const uint8_t  logo_bmp [] PROGMEM = 
{
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xfc, 0x7f, 0xf9, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0x00, 0x60, 0x01, 0x80, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0x00, 0x60, 0x01, 0xc0, 0x3c, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x60, 0x01, 0xb0, 0x64, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x00, 0x60, 0x01, 0x98, 0xc6, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x7f, 0xf9, 0x8d, 0x82, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x01, 0x80, 0x00, 0x60, 0x01, 0x87, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x60, 0x01, 0x82, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x60, 0x01, 0x80, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0xfc, 0x60, 0x01, 0x80, 0x00, 0xc0, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x04, 0x60, 0x01, 0x80, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x04, 0x60, 0x01, 0x80, 0x00, 0x60, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x04, 0x60, 0x01, 0x80, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x04, 0x60, 0x01, 0x80, 0x00, 0x30, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x04, 0x60, 0x01, 0x80, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x04, 0x60, 0x01, 0x80, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x30, 0x00, 0x04, 0x60, 0x01, 0x80, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x3f, 0xff, 0xfc, 0x7f, 0xf9, 0x80, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x01, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x01, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x80, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x7f, 0xe1, 0xff, 0xcf, 0xf3, 0xff, 0x0f, 0xff, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x3f, 0xf1, 0xff, 0xcf, 0xe3, 0xff, 0x1f, 0xfe, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x1f, 0xf8, 0xff, 0xc7, 0xe3, 0xfe, 0x1f, 0xfc, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x0f, 0xf8, 0xff, 0xc7, 0xe3, 0xfe, 0x3f, 0xf8, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x07, 0xfc, 0x7f, 0xe7, 0xe7, 0xfc, 0x7f, 0xf0, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x03, 0xfc, 0x7f, 0xe7, 0xe7, 0xfc, 0x7f, 0xe0, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x01, 0xfe, 0x3f, 0xe7, 0xe7, 0xf8, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x1f, 0xe7, 0xe7, 0xf8, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0x1f, 0xe7, 0xe7, 0xf1, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0x8f, 0xe7, 0xe7, 0xf1, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0x8f, 0xf7, 0xc7, 0xe3, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xc7, 0xf3, 0xcf, 0xe7, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xc7, 0xf3, 0xcf, 0xc7, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xe3, 0xf3, 0xcf, 0xcf, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xf3, 0xf3, 0xcf, 0x8f, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xf1, 0xf3, 0xcf, 0x9f, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf8, 0xf3, 0xcf, 0x1f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x78, 0xfb, 0xcf, 0x3e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3c, 0x7b, 0xde, 0x3c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1e, 0x7b, 0xde, 0x78, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0e, 0x3b, 0x9c, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x39, 0x9c, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x19, 0x99, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x99, 0x99, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xcd, 0x93, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x45, 0xb2, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x25, 0xa4, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x21, 0x88, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x11, 0x88, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};
//========================================================================
// Menu State Handlers
//========================================================================

GEMTmenu* CurrentMenuPtr = nullptr;

void startGEMT(GEMTmenu& StartingMenu)
{
  setMenu(StartingMenu);
}

void setMenu(GEMTmenu& NextMenu)
{
    // Skip assignment if current already equals input
  if (CurrentMenuPtr != &NextMenu)
  {
    CurrentMenuPtr = &NextMenu;
  }
  
  // Runs Current Menu 
  CurrentMenuPtr->run();
}

//========================================================================
// Encoder Handlers (Interrupt functions)
//========================================================================

// On click, the global selection variable gets updated with
// value of where it was selcted
void onEb1Encoder(EncoderButton& eb)
{
  // Reset if encoder goes past active Menu limit
  // DEBUG: Set to fixed value while figuring out menu pointer setup
  if (abs(eb.position()) >= 2)
  {
    eb.resetPosition(0);
  }

  ebState = abs(eb.position());
  
  //Serial.println(ebState);
}

void onEb1Clicked(EncoderButton& eb)
{
  // Set selection value to current state
  clicked = true;
  Serial.println("CLICKED");
  //clickedItemNumber = CurrentMenuPtr[ebState].choice;
}

//========================================================================
// GEMT Base Implementations
//========================================================================


void GEMTbase::displayPrep(void)
{
    display.clearDisplay();
    display.setCursor(0, 0);
    display.setTextColor(SSD1306_WHITE, SSD1306_BLACK);
}

void GEMTbase::resetClicked(void)
{
  clicked = 0;
}

// wtf
void GEMTbase::setFirstLine(String title)
{
  _firstLine = title;
}

void GEMTbase::showFirstLine(void)
{
  display.setCursor(0, 0);
  display.println(_firstLine);
}

//========================================================================
// GEMT Menu Implementations
//========================================================================

void GEMTmenu::bootUp()
{
  // Do nothing
  if(hasBeenBootedUp == true)
  {
    __asm__("nop");
  }
    
  else
  {
    if(!display.begin(SSD1306_SWITCHCAPVCC, screenAddress)) 
    {
      display.println(F("SSD1306 allocation failed"));
      for(;;); // Don't proceed, loop forever
    }

    //MenuTracker = this;
    hasBeenBootedUp = true;

    // Create mapping to selection action functions
    //setSelectionActions();
    eb1.setEncoderHandler(onEb1Encoder);
    eb1.setClickHandler(onEb1Clicked);
    
    // Display logo for 2 sec
    display.clearDisplay();
    display.drawBitmap(0, 0, logo_bmp, screenWidth, screenHeight, WHITE);
    display.display();
    delay(2000);
    
    display.clearDisplay();  
    display.display();
  }
}

void GEMTmenu::run(void)
{/*
  // Condition for executing users selections based on 'clicked' bool
  if (clicked)
  {
    //clickedItemNumber = CurrentMenuPtr[ebState].choice;
    //resetClicked(); // Reset before proceeding to function
    //CurrentMenuPtr[ebState].selectionAction();
  }
  */
  /*
  //Display the previous Menu state
  else
  {
    
    */
    char buffer[50]; // init buffer to hold expected string size
    
    // Setup
    eb1.update();
    displayPrep();
    showFirstLine();

    // Display all current Menu options
    for (size_t i = 0; i < (_numberOfMenuItems); ++i)
    {
      // Highlight line if user is hovering over it
      if (ebState == i)
      {
        display.setTextColor(SSD1306_BLACK, SSD1306_WHITE); // Draw 'inverse' text
      }
      else 
      {
        display.setTextColor(SSD1306_WHITE, SSD1306_BLACK); 
      }
      
      // Print out in int and Text format
      // NOTE: Need c_str() since Arduino String is not a c_string and has different delimiter
      sprintf(buffer, "%s", _itemIds[i].c_str());

      display.println(buffer);
    }
    
    display.display();
}

void GEMTmenu::addItem(String itemName, func selectionFunction)
{
  _itemIds[_currIndex] = itemName;
  _selectionActions[_currIndex] = selectionFunction;
  
  // Starts at 0, will be set to store next item if needed
  _currIndex += 1;
}

//========================================================================
// GEMT Test Implementations
//========================================================================

void GEMTtest::showInfoScreen(void)
{

}




